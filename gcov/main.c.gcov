        -:    0:Source:main.c
        -:    0:Graph:main.gcno
        -:    0:Data:main.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "bst.h"
        -:    2:#include <stdio.h>
        -:    3:#include <string.h>
        -:    4:
        -:    5:/* Add person to the BST, print them and then free the nodes */
        -:    6:
        -:    7:typedef struct {
        -:    8:	char	name[128];
        -:    9:	int	age;
        -:   10:} person_t;
        -:   11:
function person_new called 0 returned 0% blocks executed 0%
    #####:   12:person_t* person_new(const char* name, int age)
        -:   13:{
    #####:   14:	person_t* p = malloc(sizeof(*p));
    #####:   15:	strcpy(p->name, name);
    #####:   16:	p->age = age;
    #####:   17:	return p;
        -:   18:}
        -:   19:
function person_print called 0 returned 0% blocks executed 0%
    #####:   20:void person_print(void* person)
        -:   21:{
    #####:   22:	person_t* p = (person_t*) person;
        -:   23:
    #####:   24:	printf("{ name = \"%s\", age = %d }", p->name, p->age);
    #####:   25:}
        -:   26:
function person_free called 0 returned 0% blocks executed 0%
    #####:   27:void person_free(void* data)
        -:   28:{
    #####:   29:	person_t* p = (person_t*) data;
    #####:   30:	person_print(p);
    #####:   31:	free(p);
    #####:   32:}
        -:   33:
        -:   34:/* If two persons have the same name and age, they are considered to be the
        -:   35: * same person. */
function person_cmp called 0 returned 0% blocks executed 0%
    #####:   36:int person_cmp(const void* a, const void* b)
        -:   37:{
    #####:   38:	person_t*	pa		= (person_t*) a;
    #####:   39:	person_t*	pb		= (person_t*) b;
    #####:   40:	int		res_name	= strcmp(pa->name, pb->name);
        -:   41:
    #####:   42:	if (res_name == 0)
branch  0 never executed
branch  1 never executed
    #####:   43:		return pa->age - pb->age;
        -:   44:	else
    #####:   45:		return res_name;
    #####:   46:}
        -:   47:
        -:   48:#if 0
        -:   49:int main(void)
        -:   50:{
        -:   51:	bst_t* bst	= bst_new(person_cmp);
        -:   52:
        -:   53:	bst_add		(bst, person_new("Alexander", 20));
        -:   54:	bst_add		(bst, person_new("Alexander", 20));
        -:   55:	bst_add		(bst, person_new("Alexander", 25));
        -:   56:	bst_add		(bst, person_new("Johnny Bravo", 16));
        -:   57:	bst_add		(bst, person_new("Knugen", 37));
        -:   58:	bst_add		(bst, person_new("N.C. Overguard", 37));
        -:   59://	bst_execute	(bst, person_print, ORDER_PRE);
        -:   60:	bst_print	(bst, person_print);
        -:   61:	bst_free	(bst, person_free);
        -:   62:}
        -:   63:#endif
        -:   64:
        -:   65:
        -:   66:
function int_cmp called 20 returned 100% blocks executed 100%
       20:   67:int int_cmp(const void* a, const void* b)
        -:   68:{
       20:   69:	return *((int*)a) - *((int*)b);
        -:   70:}
        -:   71:
function int_print called 10 returned 100% blocks executed 100%
       10:   72:void int_print(void* data)
        -:   73:{
       10:   74:	printf("%d", *((int*)data));
       10:   75:}
        -:   76:
function int_free called 10 returned 100% blocks executed 100%
       10:   77:void int_free(void* data)
        -:   78:{
       10:   79:	printf("(%d)", *((int*)data));
       10:   80:}
        -:   81:
function main called 1 returned 100% blocks executed 100%
        -:   82:int main()
        -:   83:{
        1:   84:	bst_t*	bst;
        1:   85:	int	arr[] = { 5, 2, 3, 9, 6, 7, 1, 8, 4, 10 };
        -:   86:
        1:   87:	bst = bst_new(int_cmp);
       22:   88:	for (int i = 0; i < 10; ++i) {
branch  0 taken 91%
branch  1 taken 9%
       10:   89:		bst_add(bst, &arr[i]);
       10:   90:	}
        -:   91:
        1:   92:	bst_print(bst, int_print);
        1:   93:	printf("height = %zu\n", bst_height(bst));
        -:   94:
        1:   95:	bst_free(bst, int_free);
        1:   96:}
        -:   97:
