        -:    0:Source:bst.c
        -:    0:Graph:bst.gcno
        -:    0:Data:bst.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:#include "bst.h"
        -:    2:
        -:    3:#include <stdbool.h>
        -:    4:#include <stdio.h>
        -:    5:#include <stdlib.h>
        -:    6:#include <string.h>
        -:    7:
        -:    8:struct bst_t {
        -:    9:	node_t*	root;
        -:   10:	size_t	size;
        -:   11:	size_t	elem_size;
        -:   12:	int	(*cmp)(const void*, const void*);
        -:   13:	void	(*data_free)(void*);
        -:   14:	void	(*print)(void*);
        -:   15:};
        -:   16:
        -:   17:struct node_t {
        -:   18:	void*	data;
        -:   19:	node_t*	left;
        -:   20:	node_t*	right;
        -:   21:};
        -:   22:
        -:   23:static node_t*	node_new (void* data);
        -:   24:static void	node_free (node_t*, void (*data_free)(void*));
        -:   25:
        -:   26:
        -:   27:static void	bst_free_recursive (bst_t*, node_t*);
        -:   28:static bool	bst_add_recursive (bst_t*, node_t*, void* data);
        -:   29:static size_t	bst_height_recursive (bst_t*, node_t*);
        -:   30:static int	bst_to_array (bst_t* bst, node_t* node, void* arr[], int index);
        -:   31:static node_t*	bst_build_tree (void* arr[], int first, int last);
        -:   32:static void	bst_print_recursive(bst_t*, node_t*, void (*print)(void*), int);
        -:   33:
        -:   34:
        -:   35:/*==============================================================================
        -:   36:	BINARY SEARCH TREE
        -:   37:==============================================================================*/
        -:   38:
function bst_new called 16 returned 100% blocks executed 100%
       16:   39:bst_t* bst_new(	size_t	elem_size,
       16:   40:		int	(*cmp)(const void*, const void*),
       16:   41:		void	(*data_free)(void*),
       16:   42:		void	(*print)(void*))
        -:   43:{
       16:   44:	bst_t* bst = malloc(sizeof *bst);
        -:   45:
       16:   46:	bst->root	= NULL;
       16:   47:	bst->size	= 0;
       16:   48:	bst->elem_size	= elem_size;
       16:   49:	bst->cmp	= cmp;
       16:   50:	bst->data_free	= data_free;
       16:   51:	bst->print	= print;
        -:   52:
       16:   53:	return bst;
        -:   54:}
        -:   55:
function bst_free called 16 returned 100% blocks executed 100%
       16:   56:void bst_free(bst_t* bst)
        -:   57:{
       16:   58:	printf("\nFreeing ...\n");
       16:   59:	bst_free_recursive(bst, bst->root);
       16:   60:	printf("Done!\n");
       16:   61:	free(bst);
       16:   62:}
        -:   63:
function bst_free_recursive called 256 returned 100% blocks executed 100%
      256:   64:static void bst_free_recursive(bst_t* bst, node_t* node)
        -:   65:{
      256:   66:	if (node == NULL)
branch  0 taken 47%
branch  1 taken 53%
        -:   67:		return;
      120:   68:	bst_free_recursive(bst, node->left);
      120:   69:	bst_free_recursive(bst, node->right);
      120:   70:	node_free(node, bst->data_free);
      376:   71:}
        -:   72:
function bst_add called 60 returned 100% blocks executed 100%
       60:   73:bool bst_add(bst_t* bst, void* data)
        -:   74:{
       60:   75:	if (bst->root == NULL) {
branch  0 taken 13%
branch  1 taken 87%
        8:   76:		bst->root = node_new(data);
        8:   77:		bst->size += 1;
        8:   78:		return true;
        -:   79:	}
       52:   80:	return bst_add_recursive(bst, bst->root, data);
       60:   81:}
        -:   82:
function bst_add_recursive called 220 returned 100% blocks executed 63%
      220:   83:static bool bst_add_recursive(bst_t* bst, node_t* node, void* data)
        -:   84:{
      220:   85:	int cmp_result = bst->cmp(data, node->data);
      220:   86:	if (cmp_result == 0) {	/* Base case */
branch  0 taken 0%
branch  1 taken 100%
    #####:   87:		printf("Node already exists inside the BST. Doing nothing.\n");
    #####:   88:		return false;
      220:   89:	} else if (cmp_result < 0) {
branch  0 taken 0%
branch  1 taken 100%
    #####:   90:		if (node->left == NULL) {
branch  0 never executed
branch  1 never executed
    #####:   91:			node->left = node_new(data);
    #####:   92:			bst->size += 1;
    #####:   93:			return true;
        -:   94:		} else {
    #####:   95:			return bst_add_recursive(bst, node->left, data);
        -:   96:		}
        -:   97:	} else {
      220:   98:		if (node->right == NULL) {
branch  0 taken 24%
branch  1 taken 76%
       52:   99:			node->right = node_new(data);
       52:  100:			bst->size += 1;
       52:  101:			return true;
        -:  102:		} else {
      168:  103:			return bst_add_recursive(bst, node->right, data);
        -:  104:		}
        -:  105:	}
      220:  106:}
        -:  107:
function bst_size called 0 returned 0% blocks executed 0%
    #####:  108:inline size_t bst_size(bst_t* bst)
        -:  109:{
    #####:  110:	return bst->size;
        -:  111:}
        -:  112:
function bst_height called 0 returned 0% blocks executed 0%
    #####:  113:size_t bst_height(bst_t* bst)
        -:  114:{
    #####:  115:	return bst_height_recursive(bst, bst->root);
        -:  116:}
        -:  117:
function max called 0 returned 0% blocks executed 0%
    #####:  118:static inline int max(const int a, const int b)
        -:  119:{
    #####:  120:	return a > b ? a : b;
        -:  121:}
        -:  122:
function bst_height_recursive called 0 returned 0% blocks executed 0%
    #####:  123:static size_t bst_height_recursive(bst_t* bst, node_t* node)
        -:  124:{
    #####:  125:	if (node == NULL) {
branch  0 never executed
branch  1 never executed
    #####:  126:		return 0;
        -:  127:	} else {
    #####:  128:		return 1 + max(	bst_height_recursive(bst, node->left),
    #####:  129:				bst_height_recursive(bst, node->right));
        -:  130:	}
    #####:  131:}
        -:  132:
        -:  133:static void
        -:  134:bst_execute_preorder_recursive  (bst_t*, node_t*, void (*execute)(void*));
        -:  135:
        -:  136:static void
        -:  137:bst_execute_inorder_recursive   (bst_t*, node_t*, void (*execute)(void*));
        -:  138:
        -:  139:static void
        -:  140:bst_execute_postorder_recursive (bst_t*, node_t*, void (*execute)(void*));
        -:  141:
        -:  142:#define BST_EXECUTE(ORDER) bst_execute_ ## ORDER ## _recursive
        -:  143:
function bst_execute called 0 returned 0% blocks executed 0%
    #####:  144:void bst_execute(bst_t*			bst,
    #####:  145:		 void			(*execute)(void* data),
    #####:  146:		 traversal_order_t	order)
        -:  147:{
    #####:  148:	switch (order) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  149:	case ORDER_PRE:	 BST_EXECUTE(preorder)	(bst, bst->root, execute);break;
    #####:  150:	case ORDER_IN:	 BST_EXECUTE(inorder)	(bst, bst->root, execute);break;
    #####:  151:	case ORDER_POST: BST_EXECUTE(postorder)	(bst, bst->root, execute);break;
        -:  152:	}
    #####:  153:}
        -:  154:
        -:  155:static void
function bst_execute_preorder_recursive called 0 returned 0% blocks executed 0%
    #####:  156:bst_execute_preorder_recursive(	bst_t*	bst,
    #####:  157:				node_t* node,
    #####:  158:				void	(*execute)(void*))
        -:  159:{
    #####:  160:	if (node == NULL)
branch  0 never executed
branch  1 never executed
        -:  161:		return;
    #####:  162:	execute(node->data);
    #####:  163:	bst_execute_preorder_recursive(bst, node->left, execute);
    #####:  164:	bst_execute_preorder_recursive(bst, node->right, execute);
    #####:  165:}
        -:  166:
        -:  167:static void
function bst_execute_inorder_recursive called 0 returned 0% blocks executed 0%
    #####:  168:bst_execute_inorder_recursive(	bst_t*	bst,
    #####:  169:				node_t*	node,
    #####:  170:				void	(*execute)(void*))
        -:  171:{
    #####:  172:	if (node == NULL)
branch  0 never executed
branch  1 never executed
        -:  173:		return;
    #####:  174:	bst_execute_preorder_recursive(bst, node->left, execute);
    #####:  175:	execute(node->data);
    #####:  176:	bst_execute_preorder_recursive(bst, node->right, execute);
    #####:  177:}
        -:  178:
        -:  179:static void
function bst_execute_postorder_recursive called 0 returned 0% blocks executed 0%
    #####:  180:bst_execute_postorder_recursive(bst_t*	bst,
    #####:  181:				node_t*	node,
    #####:  182:				void	(*execute)(void*))
        -:  183:{
    #####:  184:	if (node == NULL)
branch  0 never executed
branch  1 never executed
        -:  185:		return;
    #####:  186:	bst_execute_preorder_recursive(bst, node->left, execute);
    #####:  187:	bst_execute_preorder_recursive(bst, node->right, execute);
    #####:  188:	execute(node->data);
    #####:  189:}
        -:  190:
function bst_balanced called 8 returned 100% blocks executed 83%
        8:  191:bst_t* bst_balanced(bst_t* bst)
        -:  192:{
       16:  193:	if (bst == NULL || bst->root == NULL) {
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
    #####:  194:		printf("Nothing to balance.\n");
    #####:  195:		return NULL;
        -:  196:	}
        8:  197:	void*	arr[bst->size];
        -:  198:	int	last_index;
        -:  199:	bst_t*	new;
        -:  200:
        8:  201:	last_index	= bst_to_array(bst, bst->root, arr, 0) - 1;
        -:  202:
        8:  203:	new		= bst_new(bst->elem_size, bst->cmp,
        -:  204:				  bst->data_free, bst->print);
        8:  205:	new->root	= bst_build_tree(arr, 0, last_index);
        8:  206:	new->size	= bst->size;
        8:  207:	new->cmp	= bst->cmp;
        8:  208:	new->data_free	= bst->data_free;
        8:  209:	new->print	= bst->print;
        -:  210:	// TODO: use memcpy instead for a (very) slight speedup (?)
        -:  211:
        8:  212:	bst_print(bst, bst->print);
        -:  213:
        -:  214:	return new;
       16:  215:}
        -:  216:
        -:  217:static int
function bst_to_array called 128 returned 100% blocks executed 100%
      128:  218:bst_to_array(	bst_t*	bst,
      128:  219:		node_t*	node,
      128:  220:		void*	arr[],
      128:  221:		int	index)
        -:  222:{
      128:  223:	if (node == NULL) {
branch  0 taken 53%
branch  1 taken 47%
       68:  224:		return index;
        -:  225:	}
       60:  226:	index	   = bst_to_array(bst, node->left, arr, index);
       60:  227:	arr[index] = node->data;
        -:  228://	memcpy(arr[index], node->data, bst->elem_size);
       60:  229:	index	   = bst_to_array(bst, node->right, arr, index + 1);
       60:  230:	return index;
      128:  231:}
        -:  232:
function bst_build_tree called 128 returned 100% blocks executed 100%
      128:  233:static node_t* bst_build_tree(void* arr[], int first, int last)
        -:  234:{
      128:  235:	if (first > last) {
branch  0 taken 53%
branch  1 taken 47%
       68:  236:		return NULL;
        -:  237:	}
        -:  238:	int		mid;
        -:  239:	node_t*		mid_node;
       60:  240:	mid		= (first + last) / 2;
       60:  241:	mid_node	= node_new(arr[mid]);
       60:  242:	mid_node->left	= bst_build_tree(arr, first, mid - 1);
       60:  243:	mid_node->right	= bst_build_tree(arr, mid + 1, last);
       60:  244:	return mid_node;
      128:  245:}
        -:  246:
function bst_print called 24 returned 100% blocks executed 100%
       24:  247:void bst_print(bst_t* bst, void (*print)(void* data))
        -:  248:{
       24:  249:	printf("Printing the BST:\n");
       24:  250:	bst_print_recursive(bst, bst->root, print, 0);
       24:  251:}
        -:  252:
        -:  253:static void
function bst_print_recursive called 384 returned 100% blocks executed 100%
      384:  254:bst_print_recursive(bst_t*	bst,
      384:  255:		    node_t*	node,
      384:  256:		    void	(*print)(void* data),
      384:  257:		    int		level)
        -:  258:{
      384:  259:	printf("  ");
     3648:  260:	for (int i = 0; i < level; ++i) {
branch  0 taken 79%
branch  1 taken 21%
     1440:  261:		printf("%s", i == 0 ? "|——" : "———");
        -:  262:	}
      384:  263:	if (node == NULL) {
branch  0 taken 53%
branch  1 taken 47%
      204:  264:		printf("( )\n");
      204:  265:		return;
        -:  266:	}
      180:  267:	printf("(");
      180:  268:	print(node->data);
      180:  269:	printf(")\n");
      180:  270:	bst_print_recursive(bst, node->left, print, level + 1);
      180:  271:	bst_print_recursive(bst, node->right, print, level + 1);
      564:  272:}
        -:  273:
        -:  274:
        -:  275:
        -:  276:/*==============================================================================
        -:  277:	NODE
        -:  278:==============================================================================*/
        -:  279:
function node_new called 120 returned 100% blocks executed 100%
      120:  280:static node_t* node_new(void* data)
        -:  281:{
      120:  282:	node_t*	node = malloc(sizeof *node);
        -:  283:	
        -:  284:	/* The BST does not take ownership of the data. */
      120:  285:	node->data	= data;
      120:  286:	node->left	= NULL;
      120:  287:	node->right	= NULL;
        -:  288:
      120:  289:	return node;
        -:  290:}
        -:  291:
function node_free called 120 returned 100% blocks executed 100%
      120:  292:void node_free(node_t* node, void (*data_free)(void*))
        -:  293:{
      120:  294:	if (node != NULL) {
branch  0 taken 100%
branch  1 taken 0%
      120:  295:		data_free(node->data);
      120:  296:		free(node);
      120:  297:	}
      120:  298:}
        -:  299:
        -:  300:
        -:  301:
        -:  302://
        -:  303:// TODO (Possible implementation):
        -:  304:// 	Eventually I might make a function that takes a pointer to a pointer
        -:  305:// 	to a `struct bst` and balances it in place. I imagine it would be
        -:  306:// 	useful if one does not want to keep the old unbalanced tree (it would
        -:  307:// 	result in less boilerplate API).
        -:  308://
        -:  309:// 	The function declaration would look like the following:
        -:  310://
        -:  311://		void bst_balance(bst_t** bst);
        -:  312://
        -:  313://	and its implementation would be very similar (algorithmically)
        -:  314://	to the existing `bst_balanced` function.
        -:  315://
        -:  316:
        -:  317:#if 0
        -:  318:void bst_balance(bst_t** bst, size_t elem_size)
        -:  319:{
        -:  320:	// Implement!
        -:  321:}
        -:  322:#endif
        -:  323:
